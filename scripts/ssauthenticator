#!/usr/bin/perl

# Copyright 2021 Hypernova Oy
# Copyright 2017 Koha-Suomi
# Copyright 2016 Vaara-kirjastot
#

use Modern::Perl;
use Carp;
use Data::Printer;
use Getopt::Long qw(:config no_ignore_case);

use SSAuthenticator;
use SSAuthenticator::Config;
use SSAuthenticator::Mailbox;
use SSAuthenticator::Transaction;

my ($help, $message, $verbose, $barcodeReader, $apiTest, $getConfig, $askpin);
my @params;

GetOptions(
    'h|help'                      => \$help,
    'v|verbose=i'                 => \$verbose,
    'm|message=s'                 => \$message,
    'p|params=s'                  => \@params,
    'b'                           => \$barcodeReader,
    'a|api=s'                     => \$apiTest,
    'askpin=s'                    => \$askpin,
    'get-config'                  => \$getConfig,
);

$ENV{SSA_LOG_LEVEL} = $verbose if $verbose;

my $usage = <<USAGE;

SSAuthenticator - library access control system

SSAuthenticator is a program that controls access to a library using Koha instance's
REST API and SSAuthenticator's local cache.

This scripts starts the SSAuthenticator-daemon.
Firstly it reads system configurations from /etc/ssauthenticator
Then establishes logging and proceeds to do barcode reader autoconfiguration, if it hasn't been
autoconfigured yet.

  -h --help               HELP!
  -v --verbose            Int, sets the verbosity level:
                            -1 less verbose
                            2  most verbose
  --get-config            Outputs all config in JSON to STDOUT
  --askpin barcode        Ask for PIN via the keypad for the given barcode

Mailbox-feature

One can send commands to the SSAuthenticator via this script or by manually writing files to the MailboxDir.
It is recommended to use the script to send messages to the SSAuthenticator.

  -m Send a command to the mailbox
  -p Specify the parameter for mailbox commands

Test barcode reader

  -b Initialize only the barcode reader and poll for barcodes.

EXAMPLES

    #Runs the SSAuthenticator-daemon using system-level configurations
    ssauthenticator

    #Sends a "read virtual barcode 167A0123123"-command to the SSAuthenticator's mailbox
    ssauthenticator -m controlAccess -p 167A0123123

    #Test the barcode reader, poll for barcodes only
    ssauthenticator -b

    #Test API calls - Check card permissions
    ssauthenticator --api="card:167A006007"

    #Test API calls - Check PIN code
    ssauthenticator --api="pin:167A006007:1234"

    #Test the physical keypad
    ssauthenticator --askpin="167A000001"

USAGE

if ($help) {
  print $usage;
  exit 0;
}

if ($barcodeReader) {
  my $bc = SSAuthenticator::BarcodeReader::GetReader();
  $bc->autoConfigure();
  print("Barcode reader waiting\n");
  while (1) {
    print(($bc->pollData() || '')."\n");
  }
}
elsif ($getConfig) {
  my %conf = SSAuthenticator::Config::getConfig()->vars();
  print(JSON::XS::encode_json(\%conf)."\n");
}
elsif ($apiTest) {
  if ($apiTest =~ /^(card):([^:]+)/) {
    my $trans = SSAuthenticator::Transaction->new();
    SSAuthenticator::checkCardPermission($trans, $2);
    Data::Printer::p($trans);
  }
  elsif ($apiTest =~ /^(pin):([^:]+):([^:]+)/) {
    my $trans = SSAuthenticator::Transaction->new();
    SSAuthenticator::checkPIN_tryPIN($trans, $2, $3);
    Data::Printer::p($trans);
  }
  else {
    die "Unknown --api command";
  }
}
elsif ($message) {
  SSAuthenticator::Mailbox::sendMessage($message, @params);
}
elsif ($askpin) {
  $SSAuthenticator::keyPad = SSAuthenticator::Device::KeyPad::init(SSAuthenticator::config());
  while (1) {
    eval {
      my $trans = SSAuthenticator::Transaction->new();
      SSAuthenticator::checkPIN($trans, $askpin);
      Data::Printer::p($trans);
    };
    if ($@) {
      Data::Printer::p($@);
    }
    sleep(1);
  }
}
else {
  SSAuthenticator->main();
}
